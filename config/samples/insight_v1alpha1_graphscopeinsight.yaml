apiVersion: insight.graphscope.io/v1alpha1
kind: GraphScopeInsight
metadata:
  name: graphscopeinsight-sample
spec:
  # Default values copied from <project_dir>/helm-charts/graphscope-store/values.yaml
  affinity: {}
  args: []
  auth:
    password: ""
    username: ""
  backup:
    enabled: false
  clusterDomain: cluster.local
  command:
  - /etc/groot/setup.sh
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  coordinator:
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    persistence:
      enabled: true
      existingClaim: ""
      selector: {}
      size: 100Mi
    podAnnotations: {}
    podLabels: {}
    replicaCount: 1
    resources: {}
    schedulerName: ""
  discoveryMode: file
  distributed:
    enabled: false
  dnsConfig: {}
  dnsPolicy: ""
  externalKafka:
    servers: []
  externalZookeeper:
    servers: []
  extraConfig: ""
  fileMetaStorePath: /etc/groot/my.meta
  frontend:
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    podAnnotations: {}
    podLabels: {}
    replicaCount: 1
    resources: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      gremlinPort: 12312
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        gremlin: ""
        service: ""
      port: 55555
      servicePort: 55556
      type: NodePort
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  image:
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: ""
    repository: graphscope/graphscope-store
    tag: latest
  initContainers: []
  javaOpts: ""
  kafka:
    advertisedListeners: []
    affinity: {}
    allowEveryoneIfNoAclFound: true
    allowPlaintextListener: true
    args: []
    auth:
      clientProtocol: plaintext
      externalClientProtocol: ""
      interBrokerProtocol: plaintext
      sasl:
        interBrokerMechanism: plain
        jaas:
          clientPasswords: []
          clientUsers:
          - user
          existingSecret: ""
          interBrokerPassword: ""
          interBrokerUser: admin
          zookeeperPassword: ""
          zookeeperUser: ""
        mechanisms: plain,scram-sha-256,scram-sha-512
      tls:
        autoGenerated: false
        endpointIdentificationAlgorithm: https
        existingSecret: ""
        existingSecrets: []
        jksKeystoreSAN: ""
        jksTruststore: ""
        jksTruststoreSecret: ""
        password: ""
        pemChainIncluded: false
        type: jks
      zookeeper:
        tls:
          enabled: false
          existingSecret: ""
          existingSecretKeystoreKey: zookeeper.keystore.jks
          existingSecretTruststoreKey: zookeeper.truststore.jks
          passwordsSecret: ""
          passwordsSecretKeystoreKey: keystore-password
          passwordsSecretTruststoreKey: truststore-password
          type: jks
          verifyHostname: true
    authorizerClassName: ""
    autoCreateTopicsEnable: true
    brokerRackAssignment: ""
    clusterDomain: cluster.local
    command:
    - /scripts/setup.sh
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        storageClass: ""
    commonAnnotations: {}
    commonLabels: {}
    config: ""
    containerPorts:
      client: 9092
      external: 9094
      internal: 9093
    containerSecurityContext:
      allowPrivilegeEscalation: false
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    defaultReplicationFactor: 1
    deleteTopicEnable: false
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    enabled: true
    existingConfigmap: ""
    existingLog4jConfigMap: ""
    externalAccess:
      autoDiscovery:
        enabled: false
        image:
          digest: ""
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/kubectl
          tag: 1.25.6-debian-11-r1
        resources:
          limits: {}
          requests: {}
      enabled: false
      service:
        annotations: {}
        domain: ""
        extraPorts: []
        labels: {}
        loadBalancerAnnotations: []
        loadBalancerIPs: []
        loadBalancerNames: []
        loadBalancerSourceRanges: []
        nodePorts: []
        ports:
          external: 9094
        publishNotReadyAddresses: false
        type: LoadBalancer
        useHostIPs: false
        usePodIPs: false
    externalZookeeper:
      servers: []
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
    heapOpts: -Xmx1024m -Xms1024m
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/kafka
      tag: 3.3.2-debian-11-r0
    initContainers: []
    interBrokerListenerName: INTERNAL
    kubeVersion: ""
    lifecycleHooks: {}
    listenerSecurityProtocolMap: ""
    listeners: []
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    log4j: ""
    logFlushIntervalMessages: _10000
    logFlushIntervalMs: 1000
    logPersistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: false
      existingClaim: ""
      mountPath: /opt/bitnami/kafka/logs
      selector: {}
      size: 8Gi
      storageClass: ""
    logRetentionBytes: _1073741824
    logRetentionCheckIntervalMs: 300000
    logRetentionHours: 168
    logSegmentBytes: _1073741824
    logsDirs: /bitnami/kafka/data
    maxMessageBytes: _1000012
    metrics:
      jmx:
        config: |-
          jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:5555/jmxrmi
          lowercaseOutputName: true
          lowercaseOutputLabelNames: true
          ssl: false
          {{- if .Values.metrics.jmx.whitelistObjectNames }}
          whitelistObjectNames: ["{{ join "\",\"" .Values.metrics.jmx.whitelistObjectNames }}"]
          {{- end }}
        containerPorts:
          metrics: 5556
        containerSecurityContext:
          enabled: true
          runAsNonRoot: true
          runAsUser: 1001
        enabled: false
        existingConfigmap: ""
        extraRules: ""
        image:
          digest: ""
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/jmx-exporter
          tag: 0.17.2-debian-11-r41
        resources:
          limits: {}
          requests: {}
        service:
          annotations:
            prometheus.io/path: /
            prometheus.io/port: '{{ .Values.metrics.jmx.service.ports.metrics }}'
            prometheus.io/scrape: "true"
          clusterIP: ""
          ports:
            metrics: 5556
          sessionAffinity: None
        whitelistObjectNames:
        - kafka.controller:*
        - kafka.server:*
        - java.lang:*
        - kafka.network:*
        - kafka.log:*
      kafka:
        affinity: {}
        args: []
        certificatesSecret: ""
        command: []
        containerPorts:
          metrics: 9308
        containerSecurityContext:
          enabled: true
          runAsNonRoot: true
          runAsUser: 1001
        enabled: false
        extraFlags: {}
        extraVolumeMounts: []
        extraVolumes: []
        hostAliases: []
        image:
          digest: ""
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/kafka-exporter
          tag: 1.6.0-debian-11-r52
        initContainers: []
        nodeAffinityPreset:
          key: ""
          type: ""
          values: []
        nodeSelector: {}
        podAffinityPreset: ""
        podAnnotations: {}
        podAntiAffinityPreset: soft
        podLabels: {}
        podSecurityContext:
          enabled: true
          fsGroup: 1001
        priorityClassName: ""
        resources:
          limits: {}
          requests: {}
        schedulerName: ""
        service:
          annotations:
            prometheus.io/path: /metrics
            prometheus.io/port: '{{ .Values.metrics.kafka.service.ports.metrics }}'
            prometheus.io/scrape: "true"
          clusterIP: ""
          ports:
            metrics: 9308
          sessionAffinity: None
        serviceAccount:
          automountServiceAccountToken: true
          create: true
          name: ""
        sidecars: []
        tlsCaCert: ca-file
        tlsCaSecret: ""
        tlsCert: cert-file
        tlsKey: key-file
        tolerations: []
        topologySpreadConstraints: []
      prometheusRule:
        enabled: false
        groups: []
        labels: {}
        namespace: ""
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: ""
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
    minBrokerId: 0
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      egressRules:
        customRules: []
      enabled: false
      explicitNamespacesSelector: {}
      externalAccess:
        from: []
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    numIoThreads: 8
    numNetworkThreads: 3
    numPartitions: 1
    numRecoveryThreadsPerDataDir: 1
    offsetsTopicReplicationFactor: 1
    pdb:
      create: false
      maxUnavailable: 1
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/kafka
      selector: {}
      size: 8Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    provisioning:
      args: []
      auth:
        tls:
          caCert: ca.crt
          cert: tls.crt
          certificatesSecret: ""
          key: tls.key
          keyPassword: ""
          keyPasswordSecretKey: key-password
          keystore: keystore.jks
          keystorePassword: ""
          keystorePasswordSecretKey: keystore-password
          passwordsSecret: ""
          truststore: truststore.jks
          truststorePassword: ""
          truststorePasswordSecretKey: truststore-password
          type: jks
      command: []
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      enabled: false
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraProvisioningCommands: []
      extraVolumeMounts: []
      extraVolumes: []
      initContainers: []
      nodeSelector: {}
      numPartitions: 1
      parallel: 1
      podAnnotations: {}
      podLabels: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      postScript: ""
      preScript: ""
      replicationFactor: 1
      resources:
        limits: {}
        requests: {}
      schedulerName: ""
      serviceAccount:
        automountServiceAccountToken: true
        create: false
        name: ""
      sidecars: []
      tolerations: []
      topics: []
      waitForKafka: true
    rbac:
      create: false
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
        labels: {}
        publishNotReadyAddresses: false
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        client: ""
        external: ""
      port: 9092
      ports:
        client: 9092
        external: 9094
        internal: 9093
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: []
    socketReceiveBufferBytes: 102400
    socketRequestMaxBytes: _1048576000
    socketSendBufferBytes: 102400
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    superUsers: User:admin
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    transactionStateLogMinIsr: 1
    transactionStateLogReplicationFactor: 1
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
    volumePermissions:
      containerSecurityContext:
        runAsUser: 0
      enabled: false
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r75
      resources:
        limits: {}
        requests: {}
    zookeeper:
      affinity: {}
      args: []
      auth:
        client:
          clientPassword: ""
          clientUser: ""
          enabled: false
          existingSecret: ""
          serverPasswords: ""
          serverUsers: ""
        quorum:
          enabled: false
          existingSecret: ""
          learnerPassword: ""
          learnerUser: ""
          serverPasswords: ""
          serverUsers: ""
      autopurge:
        purgeInterval: 0
        snapRetainCount: 3
      clusterDomain: cluster.local
      command:
      - /scripts/setup.sh
      common:
        exampleValue: common-chart
        global:
          imagePullSecrets: []
          imageRegistry: ""
          storageClass: ""
      commonAnnotations: {}
      commonLabels: {}
      configuration: ""
      containerPorts:
        client: 2181
        election: 3888
        follower: 2888
        tls: 3181
      containerSecurityContext:
        allowPrivilegeEscalation: false
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      dataLogDir: ""
      diagnosticMode:
        args:
        - infinity
        command:
        - sleep
        enabled: false
      enabled: true
      existingConfigmap: ""
      extraDeploy: []
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraVolumeMounts: []
      extraVolumes: []
      fourlwCommandsWhitelist: srvr, mntr, ruok
      fullnameOverride: ""
      global:
        imagePullSecrets: []
        imageRegistry: ""
        storageClass: ""
      heapSize: 1024
      hostAliases: []
      image:
        debug: false
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/zookeeper
        tag: 3.8.0-debian-11-r74
      initContainers: []
      initLimit: 10
      jvmFlags: ""
      kubeVersion: ""
      lifecycleHooks: {}
      listenOnAllIPs: false
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        probeCommandTimeout: 2
        successThreshold: 1
        timeoutSeconds: 5
      logLevel: ERROR
      maxClientCnxns: 60
      maxSessionTimeout: 40000
      metrics:
        containerPort: 9141
        enabled: false
        prometheusRule:
          additionalLabels: {}
          enabled: false
          namespace: ""
          rules: []
        service:
          annotations:
            prometheus.io/path: /metrics
            prometheus.io/port: '{{ .Values.metrics.service.port }}'
            prometheus.io/scrape: "true"
          port: 9141
          type: ClusterIP
        serviceMonitor:
          additionalLabels: {}
          enabled: false
          honorLabels: false
          interval: ""
          jobLabel: ""
          metricRelabelings: []
          namespace: ""
          relabelings: []
          scrapeTimeout: ""
          selector: {}
      minServerId: 1
      nameOverride: ""
      namespaceOverride: ""
      networkPolicy:
        allowExternal: true
        enabled: false
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: 1
        minAvailable: ""
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        dataLogDir:
          existingClaim: ""
          selector: {}
          size: 8Gi
        enabled: true
        existingClaim: ""
        labels: {}
        selector: {}
        size: 8Gi
        storageClass: ""
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: Parallel
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      preAllocSize: 65536
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        probeCommandTimeout: 2
        successThreshold: 1
        timeoutSeconds: 5
      replicaCount: 1
      resources:
        limits: {}
        requests:
          cpu: 250m
          memory: 256Mi
      schedulerName: ""
      service:
        annotations: {}
        clusterIP: ""
        disableBaseClientPort: false
        externalTrafficPolicy: Cluster
        extraPorts: []
        headless:
          annotations: {}
          publishNotReadyAddresses: true
          servicenameOverride: ""
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePorts:
          client: ""
          tls: ""
        ports:
          client: 2181
          election: 3888
          follower: 2888
          tls: 3181
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: ClusterIP
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: true
        create: false
        name: ""
      sidecars: []
      snapCount: 100000
      startupProbe:
        enabled: false
        failureThreshold: 15
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      syncLimit: 5
      tickTime: 2000
      tls:
        client:
          auth: none
          autoGenerated: false
          enabled: false
          existingSecret: ""
          existingSecretKeystoreKey: ""
          existingSecretTruststoreKey: ""
          keystorePassword: ""
          keystorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.keystore.jks
          passwordsSecretKeystoreKey: ""
          passwordsSecretName: ""
          passwordsSecretTruststoreKey: ""
          truststorePassword: ""
          truststorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.truststore.jks
        quorum:
          auth: none
          autoGenerated: false
          enabled: false
          existingSecret: ""
          existingSecretKeystoreKey: ""
          existingSecretTruststoreKey: ""
          keystorePassword: ""
          keystorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.keystore.jks
          passwordsSecretKeystoreKey: ""
          passwordsSecretName: ""
          passwordsSecretTruststoreKey: ""
          truststorePassword: ""
          truststorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.truststore.jks
        resources:
          limits: {}
          requests: {}
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        rollingUpdate: {}
        type: RollingUpdate
      volumePermissions:
        containerSecurityContext:
          enabled: true
          runAsUser: 0
        enabled: false
        image:
          digest: ""
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/bitnami-shell
          tag: 11-debian-11-r69
        resources:
          limits: {}
          requests: {}
    zookeeperChrootPath: ""
    zookeeperConnectionTimeoutMs: 6000
  kafkaProducerCustomConfigs: ""
  kafkaTopic: graphscope
  kubeVersion: ""
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  logRecycleEnable: true
  logRecycleOffsetReserve: 86400
  nameOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  offsetsPersistIntervalMs: 3000
  otel:
    collector:
      image:
        registry: docker.io
        repository: jaegertracing/all-in-one
        tag: latest
    enabled: false
    traces:
      sampler:
        arg: "0.1"
        name: traceidratio
  pdb:
    create: false
    maxUnavailable: 1
    minAvailable: ""
  pegasus:
    timeout: 240000
    worker:
      num: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    labels: {}
    storageClass: ""
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  podManagementPolicy: Parallel
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  rpcMaxBytesMb: 20
  secondary:
    enabled: false
    storeDataPath: ./data_secondary
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  snapshotIncreaseIntervalMs: 1000
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  store:
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    persistence:
      enabled: true
      existingClaim: ""
      selector: {}
      size: 1Gi
    podAnnotations: {}
    podLabels: {}
    replicaCount: 1
    resources: {}
    schedulerName: ""
  storeDataDownloadPath: /var/lib/graphscope-store/download
  storeDataPath: /var/lib/graphscope-store
  storeDataSecondaryPath: /home/graphscope/secondary
  storeGcIntervalMs: 5000
  storeQueueBufferSize: 102400
  storeWriteThreadCount: 1
  terminationGracePeriodSeconds: ""
  test:
    image:
      registry: registry.cn-hongkong.aliyuncs.com
      repository: graphscope/graphscope-store
      tag: python-3.9.9-alpine3.14-gremlin
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  uptrace:
    enabled: false
    service: uptrace
    token: project2_secret_token
  zkBasePath: /graphscope/groot
  
  
